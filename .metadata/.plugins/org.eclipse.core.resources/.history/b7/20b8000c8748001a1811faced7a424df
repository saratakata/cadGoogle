package vivo.mobile.base;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

import org.apache.log4j.Logger;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Ignore;
import org.junit.Rule;
import org.junit.Test;

import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.remote.DesiredCapabilities;


import java.util.Properties;

//import org.testng.annotations.AfterClass;
//import org.testng.annotations.BeforeClass;
//import org.testng.annotations.DataProvider;
//import org.testng.annotations.Test;

public abstract class AbstractTestCase {

	public static Logger logger = Logger.getLogger(AbstractTestCase.class);
	protected static WebDriver driver;
	
	public static String deviceName;
	public static String url;
	public static String loginPf;
	public static String senhaPf;
	
	/*@DataProvider(name = "deviceName")
    public Object[][] deviceNames(){
        return new Object[][] {
                {"Google Nexus 5", "LG Nexus 5"},
//                {"Apple iPhone 6", "Apple iPhone"},
                {"Apple iPhone 6 Plus", "Apple iPhone 6 Plus"},
//                {"LG Optimus L70", "LG Optimus L70"}
        };
    }*/
//	
//	@Rule
//	public PrintHeader ph = new PrintHeader();
	
	@BeforeClass
	public static void beforeClass() throws Exception {	
		
		
		
		Properties prop = getProp();
		
		deviceName = prop.getProperty("deviceName");
		url = prop.getProperty("URL");		
		loginPf = prop.getProperty("loginPf");
		senhaPf = prop.getProperty("senhaPf");
				
		System.out.println("URL" + url);
		
		
		 Map<String, String> mobileEmulation = new HashMap<String, String>();
		 	mobileEmulation.put("deviceName", deviceName);
	 
	        Map<String, Object> chromeOptions = new HashMap<String, Object>();
	        chromeOptions.put("mobileEmulation", mobileEmulation);
	        DesiredCapabilities capabilities = DesiredCapabilities.chrome();
	        capabilities.setCapability(ChromeOptions.CAPABILITY, chromeOptions);
	        System.setProperty("webdriver.chrome.driver", "C:\\Ferramentas\\chromedriver.exe");
	        driver = new ChromeDriver(capabilities);
	        driver.manage().window().maximize();
			
			/*
			Properties prop = getProp();
			
			loginPf = prop.getProperty("loginPf");
			loginPj = prop.getProperty("loginPj");
			senhaPf = prop.getProperty("senhaPf");
			senhaPj = prop.getProperty("senhaPj");
			senhaGestor = prop.getProperty("senhaGestor");
			linhaGestor = prop.getProperty("linhaGestor");
			cpfGestor = prop.getProperty("cpfGestor");
			url = prop.getProperty("URL");		
			System.out.println("URL" + url);*/
		
	}
	 
	public static Properties getProp() throws IOException {
		Properties props = new Properties();
		FileInputStream file = new FileInputStream(
				"./properties/dados_acesso_mobile.properties");
		props.load(file);
		return props;

	}

		

	/*
	@AfterClass
	public static void afterClass() throws Exception {
		if (driver != null) {
			logger.info("TST - Fechando o browser...");
			driver.close();
			driver.quit();
		}
	}*/
	
}
